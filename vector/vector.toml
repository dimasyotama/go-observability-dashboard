# Vector configuration for reading application log files

# Data directory for Vector state
data_dir = "/var/lib/vector"

# Source: Read logs from file
[sources.app_logs]
  type = "file"
  include = ["/app/logs/app.log"]
  read_from = "beginning"
  fingerprint.strategy = "device_and_inode"

# Transform: Parse JSON logs and add labels
[transforms.parse_logs]
  type = "remap"
  inputs = ["app_logs"]
  drop_on_error = false
  source = '''
    # Parse the JSON log line
    parsed, err = parse_json(.message)
    
    # Only process if parsing succeeded
    if err == null {
      # Extract all fields - use ! for infallible operations
      .level = string!(parsed.level)
      .msg = string!(parsed.msg)
      .time = string!(parsed.time)
      
      # Extract trace and span IDs if they exist
      if exists(parsed.trace_id) {
        .trace_id = string!(parsed.trace_id)
      }
      if exists(parsed.span_id) {
        .span_id = string!(parsed.span_id)
      }
      
      # Extract custom application fields
      if exists(parsed.item_id) {
        .item_id = to_string!(parsed.item_id)
      }
      if exists(parsed.error) {
        .error = string!(parsed.error)
      }
      if exists(parsed.query_name) {
        .query_name = string!(parsed.query_name)
      }
      if exists(parsed.min_price) {
        .min_price = to_string!(parsed.min_price)
      }
      if exists(parsed.results_found) {
        .results_found = to_string!(parsed.results_found)
      }
      if exists(parsed.item_name) {
        .item_name = string!(parsed.item_name)
      }
      if exists(parsed.item_price) {
        .item_price = to_string!(parsed.item_price)
      }
      
      # Set the message to msg field for better readability
      .message = .msg
      
      # Add service labels
      .service_name = "the-app"
      .job = "go-app-logs"
      .environment = "development"
    }
  '''

# Sink: Send logs to Loki
[sinks.loki]
  type = "loki"
  inputs = ["parse_logs"]
  endpoint = "http://loki-app:3100"
  compression = "snappy"
  
  # Labels - only low cardinality values
  labels.service_name = "{{ service_name }}"
  labels.job = "{{ job }}"
  labels.environment = "{{ environment }}"
  labels.level = "{{ level }}"
  
  # Encoding configuration
  [sinks.loki.encoding]
    codec = "json"
    except_fields = ["file", "host", "source_type"]

# Internal metrics
[sources.internal_metrics]
  type = "internal_metrics"

# Expose Vector metrics for Prometheus scraping
[sinks.prometheus_exporter]
  type = "prometheus_exporter"
  inputs = ["internal_metrics"]
  address = "0.0.0.0:9598"
  default_namespace = "vector"